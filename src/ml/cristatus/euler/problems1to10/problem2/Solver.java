/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Subhomoy Haldar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package ml.cristatus.euler.problems1to10.problem2;

import ml.cristatus.euler.BaseSolver;

import java.math.BigInteger;

/**
 * <h1>Even Fibonacci numbers</h1>
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * <p>
 * {@code 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...}
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 *
 * @author Subhomoy Haldar
 * @version 1.0
 */
public class Solver implements BaseSolver {

    /**
     * The entry point for the program if used in a terminal.
     *
     * @param args The command-line arguments.
     */
    public static void main(String[] args) {
        bruteForce(4_000_000);
        betterBruteForce(4_000_000);
    }

    /**
     * {@inheritDoc}
     *
     * @return {@inheritDoc}
     */
    @Override
    public long getAnswer() {
        return betterBruteForce(4_000_000);
    }

    /**
     * {@inheritDoc}
     *
     * @return {@inheritDoc}
     */
    @Override
    public BigInteger getBigIntegerAnswer() {
        return BigInteger.valueOf(getAnswer());
    }

    /**
     * This methods calculates all the Fibonacci numbers, checks for the even
     * numbers and adds them up.
     *
     * @param limit The exclusive limit.
     * @return The sum of even Fibonacci terms.
     */
    public static long bruteForce(long limit) {
        long a, b = 0, c = 1;
        long sum = 0;
        while (c < limit) {
            if ((c & 1) == 0)   // bit-wise check for even numbers
                sum += c;
            a = b;
            b = c;
            c = a + b;
        }
        return sum;
    }

    /**
     * This method generates only the even terms on the basis of the fact
     * that every 3rd term, starting from 2 is even.
     *
     * @param limit The exclusive limit.
     * @return The sum of even Fibonacci terms.
     */
    public static long betterBruteForce(long limit) {
        long a, b = 0, c = 2;
        long sum = 0;
        while (c < limit) {
            sum += c;
            a = b;
            b = c;
            c = a + (b << 2);   // f(n) =  4*f(n-3) + f(n-6)
        }
        return sum;
    }
}
