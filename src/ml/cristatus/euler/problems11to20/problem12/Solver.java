/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Subhomoy Haldar
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package ml.cristatus.euler.problems11to20.problem12;

import ml.cristatus.euler.BaseSolver;

import java.math.BigInteger;

/**
 * <h1>Highly divisible triangular number</h1>
 * <p>The sequence of triangle numbers is generated by adding the natural
 * numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 +
 * 5 + 6 + 7 = 28. The first ten terms would be:</p>
 * <p style="text-align:center;">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>
 * <p>Let us list the factors of the first seven triangle numbers:</p>
 * <blockquote style="font-family:'courier new';"><b> 1</b>: 1<br><b> 3</b>:
 * 1,3<br><b> 6</b>: 1,2,3,6<br><b>10</b>: 1,2,5,10<br><b>15</b>:
 * 1,3,5,15<br><b>21</b>: 1,3,7,21<br><b>28</b>: 1,2,4,7,14,28</blockquote>
 * <p>We can see that 28 is the first triangle number to have over five
 * divisors.</p>
 * <p>What is the value of the first triangle number to have over five hundred
 * divisors?</p>
 *
 * @author Subhomoy Haldar
 * @version 1.0
 */
public class Solver implements BaseSolver {

    /**
     * The entry point for the program if used in a terminal.
     *
     * @param args The command-line arguments.
     */
    public static void main(String[] args) {
        System.out.println(bruteForce(500));
    }

    /**
     * {@inheritDoc}
     *
     * @return {@inheritDoc}
     */
    @Override
    public long getAnswer() {
        return bruteForce(500);
    }


    /**
     * {@inheritDoc}
     *
     * @return {@inheritDoc}
     */
    @Override
    public BigInteger getBigIntegerAnswer() {
        return BigInteger.valueOf(getAnswer());
    }

    /**
     * This method uses brute force to find the triangular number whose
     * number of factors exceeds the argument.
     *
     * @param minimum The minimum number of factors required.
     * @return The solution using brute-force.
     */
    public static long bruteForce(long minimum) {
        long n = 1;
        while (true) {
            long number = (n * (n + 1)) >>> 1;
            long count = naiveCountFactorsOf(number);
            if (count >= minimum) {
                return number;
            }
            n++;
        }
    }

    /**
     * This method uses certain optimizations to reduce the number of
     * operations required to count the divisors of a number.
     *
     * @param number The number whose factor count is sought.
     * @return The number of factors of the number.
     */
    public static long naiveCountFactorsOf(long number) {
        long count = 2; // 1 and itself
        long limit = (long) Math.sqrt(number);
        for (long i = 2; i <= limit; i++) {
            if (number % i == 0) {
                if (i == limit) {   // i.e. it is a perfect square
                    count++;
                } else {
                    count += 2;
                }
            }
        }
        return count;
    }
}
